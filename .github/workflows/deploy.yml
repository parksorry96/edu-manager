# .github/workflows/deploy.yml
# GitHub Actions를 통한 자동 배포

name: Deploy to AWS

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: edu-manager-backend
  S3_BUCKET: edu-manager-frontend

jobs:
  # 백엔드 배포
  deploy-backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/edu-manager
          git pull origin main
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          docker system prune -f
          
  # 프론트엔드 배포
  deploy-frontend:
    name: Deploy Frontend to S3
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install pnpm
      run: npm install -g pnpm
    
    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        echo "VITE_API_URL=${{ secrets.API_URL }}" > .env.production
        pnpm build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      working-directory: ./frontend
      run: |
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "index.html" \
          --exclude "*.json"
        
        aws s3 cp dist/index.html s3://${{ env.S3_BUCKET }}/index.html \
          --cache-control "no-cache, no-store, must-revalidate"
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  # 배포 알림
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
